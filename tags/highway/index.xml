<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Highway on けんごのお屋敷</title>
    <link>http://tkengo.github.io/tags/highway/</link>
    <description>Recent content in Highway on けんごのお屋敷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 11 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tkengo.github.io/tags/highway/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文字列検索ツール highway は &#34;高速&#34; を謳うために何をやってきたのか</title>
      <link>http://tkengo.github.io/blog/2015/12/11/architecture-of-highway/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tkengo.github.io/blog/2015/12/11/architecture-of-highway/</guid>
      <description>先日、社内で highway のアーキテクチャの話をする機会があったので、スライドを作って話しました。秘密情報というわけでもないので、せっかくなので公開したいと思います。ということで、この記事では highway のアーキテクチャを簡単に紹介します。C で実装されており、実装にあたっては既存のツールよりも高速に動作させるためにいくつもの工夫をしたので highway の内部がどうなっているのか興味がある方は読んでみると面白いかもしれません。
highway についての詳細はこちら。
highway という高速検索ツールを作ってみました
資料   以下、補足や簡単な説明などをつらつらと。
文字列探索アルゴリズム highway ではリテラルによる検索は、以下の論文を参考に実装しています。
A simple fast hybrid pattern-matching algorithm
通称 FJS 法と呼ばれるこのアルゴリズムは Boyer-Moore と Knuth–Morris–Pratt をベースにしています。Boyer-Moore と Knuth-Morris-Pratt についてはスライド内で解説していますが、FJS についてはアルゴリズム開発者の一人である Jennings さんの Web サイトで Java アプレットを使ったデモを公開しており、実際にどのように検索が進んでいくのかがとてもわかりやすく可視化されていますので、動作の解説はそちらにおまかせしました。是非以下の URL から覗いてみてください。
http://www.cgjennings.ca/fjs/
また、スライドには書いてありませんが highway は正規表現による検索もサポートしており、その部分には OSS の正規表現ライブラリである Onigmo(鬼雲) を利用しています。
Onigmo
マルチスレッド highway はマルチスレッドで動作し、内部は以下の要素で構成されます。
 メインスレッド
検索対象ファイルを再帰的に探索し、.gitignore の無視パターンを加味しつつ、対象ファイルをキューに追加していくのが仕事です。
 ファイルキュー
検索対象ファイルが溜まっていくキューです。他の全てのスレッドからアクセスされるため、キューへのアクセスは排他制御されています。
 検索スレッド
1 ファイルの検索処理が 1 スレッドに割り当てられます。スレッドはキューの先頭にあるファイルを取り出して検索し、処理がが完了するとキューのアイテムに対して探索済みのフラグを付与します。</description>
    </item>
    
    <item>
      <title>highway という高速検索ツールを作りました</title>
      <link>http://tkengo.github.io/blog/2015/10/19/release-highway/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tkengo.github.io/blog/2015/10/19/release-highway/</guid>
      <description>いまや grep、ack、ag、pt、sift など様々な grep ツールが存在し、高速 grep ツール戦線が激化している昨今ですが、いかがお過ごしでしょう。私は普段から検索ツールには pt を使っていますが、ふとしたことから文字列探索アルゴリズムに興味がわいてきて highway という高速パターンマッチングツールを開発しました。pt や sift が流行りの Go 言語で実装されている中、我が道を行く highway は C 言語での実装にしました (単に Go 言語を知らないだけとも言う＼(^o^)／)。
highway (github)
highway とは マルチスレッドで動作する高速パターンマッチングツールです。速そうな名前をつけたくて「高速」でググったら「高速道路」がたくさん出てきたのでこの名前になりました。そりゃそうだ。
機能 基本的な機能としては pt とほぼ同じです。しかし速度については pt 以上かな、と。
 ag / pt / sift 相当(もしくはそれ以上) の速度でのパターンマッチング。 正規表現での検索。 UTF-8 以外に EUC-JP と Shift_JIS のサポート(だって日本人だもん)。 デフォルトで .gitignore 内のパターンを検索対象から除外。  インストール Mac OS X homebrew で一発です。
$ brew tap tkengo/highway $ brew install highway  Fedora Core yum でインストールできます。その際にリポジトリを追加する必要があります。</description>
    </item>
    
  </channel>
</rss>