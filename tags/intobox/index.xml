<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intobox on けんごのお屋敷</title>
    <link>http://tkengo.github.io/tags/intobox/</link>
    <description>Recent content in Intobox on けんごのお屋敷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 12 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tkengo.github.io/tags/intobox/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>capistrano をバージョン 3 にアップデートして時代の流れに乗る</title>
      <link>http://tkengo.github.io/blog/2013/12/12/version-up-capistrano-v3/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tkengo.github.io/blog/2013/12/12/version-up-capistrano-v3/</guid>
      <description>2013 年 6 月頃に capistrano のバージョン 3 がリリースされました。かなり久しぶりのメジャーバージョンアップで色々変わっているようです。
Intobox でもデプロイには capistrano を使っていて、今回 capistrano のバージョンアップをしましたので手順の紹介とハマったことなどをまとめたいと思います。
capistrano v3 capistrano v3 は、より良いモジュール化、より簡単なデバッグ、より高速なデプロイ、などを設計目標として掲げています。
変更点が多いのでアップグレードガイドが公式サイトより提供されています。基本的にはここを見ながら進めていくのですが、やることといえば
 Gemfile に gem &#39;capistrano&#39;, &#39;~&amp;gt; 3.0&#39; を追加 bundle install bundle exec cap install  をやって Capfile や config/deploy.rb を変更点に合わせてひたすら修正していくだけになります。ただ、バージョンアップ中にハマったポイントはあったので v2 と v3 の変更点も見ながら紹介していきます。
v2 と v3 の変更点 必要な gem が変わった v3 からは、何をデプロイするかによって必要な gem が異なり、細かく分かれています。たとえば rbenv を使う Rails プロジェクトをデプロイする場合は
gem &#39;capistrano&#39; gem &#39;capistrano-rails&#39; gem &#39;capistrano-bundler&#39; gem &#39;capistrano-rbenv&#39;  と、それぞれ必要な gem を指定してあげる必要があります。一見必要な gem が増えて面倒くさそうですが、これは capistrano が Rails だけのものではなくなったということです(まぁ v2 の頃から Rails 以外でもデプロイできてたわけですが。v3 では明示的に必要なものがモジュール化されています)。</description>
    </item>
    
    <item>
      <title>本当にあったプログラマとデザイナの怖くない話 in Fukuoka.php Vol.11</title>
      <link>http://tkengo.github.io/blog/2013/11/28/collaboration-with-programmer-and-designer/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tkengo.github.io/blog/2013/11/28/collaboration-with-programmer-and-designer/</guid>
      <description>Fukuoka.php Vol.11 に参加してきました。
リンク先にもあるように今回は NO PHP DAY ということで Fukuoka.php という名前を冠しながらも、誰一人として PHP の話をしなかったという珍しい勉強会でした。残念ながらUstreamの中継はなかったためオープンにはなりませんでしたが、いろいろと勉強になってたくさんインプットができたイベントでした。素晴らしい発表の数々は、後々各発表者の方より資料やブログが公開されると思います。Twitter では #fukuokaphp ハッシュタグで流れを追えると思います。
そんな NO PHP DAY な Fukuoka.php で僕も LT 枠をもらっていたので、ひとつアウトプットをしてきました。
プログラマとデザイナのコラボレーション Web 業界では、プログラマとデザイナが一緒に仕事をすることは多いと思います。一般的にプログラマはデザイン業はできません。そしてその逆もしかり、デザイナはプログラミング業はできません。(たまにプログラミングもデザインもどっちも出来て、RailsやるしPhotoshopやるし、なんでも一人でやるぜ、というようなスーパーな人はいますが、そういうのは除外)
そんな中でいかにして効率よくお互いに協力し合いながらサービス開発を進めていけばいいのか、というのはベストプラクティスがありそうでなさそうな、そんな一概には言えない難しい話です。今回は Intobox ではどうやってプログラマとデザイナが協力して開発をしていたのかというプラクティスについて紹介してきました。あくまで Intobox ではこうやった、という事例紹介です。LT では 5 分しか割り当てられてなかったので充分にしゃべれませんでした。補足も込めて、もう一度資料の紹介と内容のまとめを書きたいと思います。
Fukuoka.php でしゃべった資料はこちら。本当に怖くないです。
  本当にあったプログラマとデザイナの怖くない話
Intobox を知らない人はこちらの記事も合わせて。送るをもっとシンプルに。ファイル送信サービス「Intobox」をリリースしました。https://intobox.in
Intobox の開発フロー Intobox ではソースコード管理に git を、リモートリポジトリとして bitbucket を使っています。開発フローは
 bitbucket でイシュー発行 デザイナがモックを作成してイシューに添付 プログラマがモックを元にある程度まで開発する 今度はデザイナがディテールを調整する デザイナがプルリクエストを出す プログラマがプルリクエストを確認してマージ  という流れです。デザイナしかプルリクエストを出していないあたり若干プログラマがリードしてる感じではありますが、プログラマがデザイナに対してプルリクエストを出してもデザイナがわかるところが無いので Intobox ではそれはやってません。逆にデザイナからのプルリクエストをやっているのは、プログラマが作っておいた JavaScript の DOM 操作や Ajax 処理なんかが、タグやクラス名の変更によって壊れていないかどうかを確認するというところで有効に働いていました。
コミュニケーションを欠かさない プログラマとデザイナはお互い畑違いのところでそれぞれ作業をやっています。ともすれば、私達はお互いに何をやっているかをわかっていません。なので、コミュニケーションはとても大事です。進捗確認という意味でも、モチベーションを保つという意味でも、欠かさずに意識しておきたいところです。</description>
    </item>
    
    <item>
      <title>送るをもっとシンプルに。ファイル送信サービス「Intobox」をリリースしました。</title>
      <link>http://tkengo.github.io/blog/2013/11/20/launch-the-intobox/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tkengo.github.io/blog/2013/11/20/launch-the-intobox/</guid>
      <description>「送る」をもっとシンプルに をコンセプトとした Intobox というサービスをリリースしました。
Intobox は Facebook の友逹に対してファイルを送信することができ、送信されたファイルは相手の Dropbox に直接に転送されます。ファイルの受信側では Dropbox のクライアントツールがインストールされていれば Intobox からファイルが送信された後、ダウンロードする手間もなく自動的に自分の端末に同期されます。
Intobox Intobox には Facebook を使ってサインインします。ユーザー登録は必要ありません。サインインできればDropboxの認証画面が出てくるのでそちらも認証を済ませておきます。Dropbox認証時に すべてのファイルやフォルダへのアクセス と表示されますが、実際にはすべてのファイルやフォルダにはアクセスしておらず、受け取り側の Dropbox の Intobox というディレクトリ以下への保存以外の操作は行いません。
Dropbox の認証が完了すると自分の Facebook の友逹一覧が表示されます。ファイルを送信するためには相手側も Intobox で Facebook と Dropbox の認証を完了させておく必要があります。まだ認証が完了していない相手は「招待する」という状態になっているので、ファイルを送るために Intobox のユーザーになってもらいましょう。 相手側の Facebook と Dropbox の認証が完了すれば、今度は「ファイルを送る」という状態になります。
これで準備は完了です。あとは友逹をクリックするとファイル送信用のダイアログが表示されますので、送信したいファイルを選んで送信するだけです。少し待てば自動的に相手の Dropbox にファイルが届いています。
セバスチャン Intobox のトップにどんと存在感のあるキャラクター セバスチャン がいます。彼は Intobox のマスコットキャラクターです。
Intobox では公式に Facebook のページと Twitter のアカウントを持っていて、セバスチャンが運営を頑張っています。
Facebook ページはこちら
Twitter アカウントはこちら
Intobox についての情報を書き込んでいきますので、よかったらフォローしてみてください。
良いチームに巡りあう・作り上げる Intobox は会社の仲の良い人達とのチームで開発をしました。チームと言っても今は2人だけなのですが(元々は3人いたけど1人はプライベートとの兼ね合いで途中から開発にほぼコミットできなくなった)。さて、会社の人と一緒に作ったと言っても、会社の業務とは全然関係ないところでプライベートな時間を使ってやってきました。構成としてはプログラマ1人、デザイナ1人で、それぞれプログラミングとデザイン業を分担してやって、ディレクションは空いた時間で2人で協力して進めていました。
しかし、業務外でやっていると明確な期限(納期)というものがありません。納得の行くまで作りこんで作りこんで、ようやく完成させたものをリリースさせることもできます。忙しくて手を付けれなくなれば、そこで開発を停止することもできます。要するになんでも自由にしてしまえます。自分たちで。
個人のプライベートな時間を使っているとその辺が緩くなってしまい、頑張ったはいいけど結局は何も得ることがなかったり、出来上がったものの完成度が低く認知してもらえなかったりすると、とてももったいないです。別に個人の時間なので問題はないと思うのですが、せっかくやるならそういうのは避けたい。</description>
    </item>
    
  </channel>
</rss>